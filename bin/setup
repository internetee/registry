#!/usr/bin/env ruby
require 'pathname'
require 'fileutils'
include FileUtils

# path to your application root.
APP_ROOT = Pathname.new File.expand_path('../../',  __FILE__)


def system!(*args)
  system(*args) || abort("\n== Command #{args} failed ==")
end

Dir.chdir APP_ROOT do
  puts "== Installing gem build deps =="
  uid = `id -u`
  uid.delete!("\n")
  SUDO_PREFIX=""
  unless (uid  == "0")
    #puts uid
    SUDO_PREFIX="sudo"
  end
  system! "#{SUDO_PREFIX} apt-get update && #{SUDO_PREFIX} apt-get -y --no-install-recommends install libxml2 libxml2-dev postgresql-client postgresql-client-common libpq-dev"

  puts "== Installing rbenv ruby manager to #{ENV['HOME']} =="
  unless Dir.exists?("#{ENV['HOME']}/.rbenv/")
    system! "git clone https://github.com/sstephenson/rbenv.git $HOME/.rbenv"
    system! 'echo export PATH="$HOME/.rbenv/bin:$PATH" >> ~/.bashrc'
    system! "echo "'eval $(rbenv init -)'" >> ~/.bashrc"
  end

  unless Dir.exists?("#{ENV['HOME']}/.rbenv/plugins/ruby-build/")
    system! "git clone https://github.com/sstephenson/ruby-build.git $HOME/.rbenv/plugins/ruby-build"
    system! 'echo export PATH="$HOME/.rbenv/plugins/ruby-build/bin:$PATH" >> ~/.bashrc'
  end
  unless Dir.exists?("#{ENV['HOME']}/.rbenv/plugins/rbenv-default-gems/")
    system! "git clone https://github.com/rbenv/rbenv-default-gems.git $HOME/.rbenv/plugins/rbenv-default-gems"
    unless File.exists?("#{ENV['HOME']}/.rbenv/default-gems")
      system! 'echo "bundler" > ~/.rbenv/default-gems'
      end
  end



  # include rbenv in path
  ENV['PATH'] = ENV['HOME'] + "/.rbenv/bin:" +  ENV['HOME'] + "/.rbenv/plugins/ruby-build/bin:" + ENV['PATH']
  NEEDED_RUBY = `cat .ruby-version`
  if ('!bundle check') == false
    system! "#{SUDO_PREFIX} apt-get -y --no-install-recommends install libreadline-dev"
    puts "Installing Ruby: " + NEEDED_RUBY
    system!("rbenv install " + NEEDED_RUBY)
    system!("rbenv rehash")
  else
    puts "Ruby " + NEEDED_RUBY  + "already installed"
  end

  puts "== Installing dependencies =="
  system! "gem install bundler --conservative"
  system('bundle check') || system!('bundle install')

  #puts "\n== Copying sample development config files =="
  # unless File.exist?("config/database.yml")
  #   system! "cp config/database-example-development.yml config/database.yml"
  # end

  puts "\n== Preparing database =="
  system! "bin/rake db:setup"

  puts "\n== Removing old logs and tempfiles =="
  system! 'bin/rails log:clear tmp:clear'

  puts "\n== Restarting application server =="
  system! 'bin/rails restart'
end
